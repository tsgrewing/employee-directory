{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/Search/index.js","components/EmployeeTable/index.js","components/EmployeeList/index.js","utils/API.js","components/EmployeeDirectory/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","children","className","Title","Search","props","htmlFor","onChange","handleInputChange","type","name","placeholder","id","onSubmit","e","preventDefault","EmployeeTable","employees","map","emp","src","picture","medium","alt","first","last","title","email","phone","EmployeeList","onClick","sortByName","data-col","class","sortByEmail","sortByNumber","axios","get","EmployeeDirectory","state","search","order","filteredEmployees","empList","sortedList","sort","a","b","setState","evt","searchedName","target","value","filter","toLowerCase","indexOf","API","then","res","data","results","this","Component","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c03d2985.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper({children}) {\n  return <main className=\"wrapper\">{children}</main>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title() {\n  return (\n  <h1 className=\"title\">Employee Directory</h1>\n  );\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\"\n\nfunction Search(props) {\n    return (\n        <form className=\"search text-center\">\n            <div className=\"form-group\">\n            <label htmlFor=\"employeeSearch\" className=\"h4\">Search:</label>\n            <input\n                onChange={props.handleInputChange}\n                type=\"text\"\n                name=\"employeeSearch\"\n                className=\"form-control text-center\"\n                placeholder=\"Search by First Name\"\n                id=\"search\"\n                onSubmit={(e)=>(e.preventDefault)}\n            />\n            </div>\n        </form >\n    )\n}\n\nexport default Search;","import React from \"react\";\nimport \"./style.css\";\n\nfunction EmployeeTable(props) {\n  return (\n    <tbody>\n      {props.employees.map(emp => (\n        <tr className=\"employeeRow\">\n          <td>\n            <img src={emp.picture.medium} alt={`${emp.name.first} ${emp.name.last}`} title={`${emp.name.first} ${emp.name.last}`} />\n          </td>\n          <td>\n            {`${emp.name.first} ${emp.name.last}`}\n          </td>\n          <td>\n            {emp.email}\n          </td>\n          <td>\n            {emp.phone}\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nexport default EmployeeTable;\n","import React, { Component } from \"react\";\nimport EmployeeTable from \"../EmployeeTable\";\nimport \"./style.css\";\n\nfunction EmployeeList (props) {\n    return (\n        <div className=\"employeeTable\">\n            <table className=\"table table-hover table-dark\">\n                <thead>\n                   <tr>\n                       <th></th>\n                       <th>Name <i onClick={props.sortByName} data-col=\"name.first\" class=\"fas fa-sort\"></i></th>\n                       {/* add sort by email and phone */}\n                       {/* combine name and email as \"sortAlphabetically\" */}\n                       <th>Email <i onClick={props.sortByEmail} data-col=\"email\" class=\"fas fa-sort\"></i></th>\n                       <th>Phone <i onClick={props.sortByNumber} class=\"fas fa-sort\"></i></th>\n                   </tr> \n                </thead>\n                <EmployeeTable employees={props.employees} />\n            </table>\n        </div>\n    );\n}\n\nexport default EmployeeList;","import axios from \"axios\";\n\nexport default {\n    getEmployees() {\n        return axios.get(\"https://randomuser.me/api/?results=20\")\n    }\n};","import React, {Component} from \"react\";\nimport Search from \"../Search\";\nimport EmployeeList from \"../EmployeeList\";\nimport API from \"../../utils/API\";\n\n\nclass EmployeeDirectory extends Component {\n    state= {\n        search: \"\",\n        employees: [],\n        order: \"\",\n        filteredEmployees: []\n    }\n\n    componentDidMount() {\n        API.getEmployees().then(res => {\n            this.setState({\n                employees: res.data.results,\n                filteredEmployees: res.data.results\n            });\n        });\n    };\n\n    // Combine email and name sorting to a single sortAlphabetically function and use data att to determine what to sort by\n    sortByName = () => {\n        const empList = this.state.filteredEmployees;\n        if (this.state.order === \"ascend\") {\n            const sortedList = empList.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\n            this.setState({\n                employees: sortedList,\n                order: \"descend\"\n            })\n        }\n        else {\n            const sortedList = empList.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\n            this.setState({\n                employees: sortedList,\n                order: \"ascend\"            \n            })\n        };\n    };\n\n    sortByEmail = () => {\n        const empList = this.state.filteredEmployees;\n        if (this.state.order === \"ascend\") {\n            const sortedList = empList.sort((a, b) => (a.email > b.email) ? 1 : -1)\n            this.setState({\n                employees: sortedList,\n                order: \"descend\"\n            })\n        }\n        else {\n            const sortedList = empList.sort((a, b) => (a.email > b.email) ? -1 : 1)\n            this.setState({\n                employees: sortedList,\n                order: \"ascend\"            \n            })\n        };\n    };\n    \n    sortByNumber = () => {\n        const empList = this.state.filteredEmployees;\n        if (this.state.order === \"ascend\") {\n            const sortedList = empList.sort((a, b) => (a.phone > b.phone) ? 1 : -1)\n            this.setState({\n                empList: sortedList,\n                order: \"descend\"\n            })\n        }\n        else {\n            const sortedList = empList.sort((a, b) => (a.phone > b.phone) ? -1 : 1)\n            this.setState({\n                empList: sortedList,\n                order: \"ascend\"            \n            })\n        };\n    };\n\n    // add functionality to allow for searches by first or last name\n    handleInputChange = evt => {\n        const employees = this.state.employees;\n        const searchedName = evt.target.value;\n        const filteredEmployees = employees.filter(emp => emp.name.first.toLowerCase().indexOf(searchedName.toLowerCase()) > -1)\n        if (!filteredEmployees) {\n            return this.setState\n        }\n        this.setState({filteredEmployees: filteredEmployees})\n    }\n\n    render() {\n        return (\n            <div className=\"directoryWrapper\">\n                <Search  handleInputChange={this.handleInputChange} />\n                <EmployeeList employees={this.state.filteredEmployees} sortByName={this.sortByName} sortByEmail={this.sortByEmail} sortByNumber={this.sortByNumber} />\n            </div>\n        )\n    }\n}\n\nexport default EmployeeDirectory;","import React from \"react\";\nimport EmployeeDirectory from \"../EmployeeDirectory\";\nimport \"./style.css\";\n\nfunction Main() {\n    return (\n        <div className=\"container\">\n            <EmployeeDirectory />\n        </div>\n    )\n}\n\nexport default Main;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Main from \"./components/Main\";\nimport Nav from \"./components/Nav\"\n\n\nfunction App() {\n    return (\n      <Wrapper>\n        <Title />\n        <Main />\n      </Wrapper>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}